from pathlib import Path
import shutil
import pandas as pd

SAMPLE_TABLE = pd.read_csv(config["input"]["sample table"], index_col="sample", sep="\t")
SAMPLE_TABLE.index = SAMPLE_TABLE.index.map(str)
SAMPLES = SAMPLE_TABLE.index.values

benchmark_dir = Path('benchmark')
benchmark_dir.mkdir(exist_ok=True)

log_dir = Path(config["logging directory"])
log_dir.mkdir(exist_ok=True)

output_path_dict = {
    "done_files": Path(config["scratch directory"]) / "done_files",
    "trimmed_reads": Path(config["scratch directory"]) / "trimmed_reads",
    "concat_gff": {
        "concat_gff_file": Path(config["scratch directory"])
        / "concat_gff"
        / "concat_gff.gff",
        "concat_gff_mod_file": Path(config["scratch directory"])
        / "concat_gff"
        / "concat_gff_mod.gff",
    },
    "concat_genome": {
        "concat_genome_file": Path(config["scratch directory"])
        / "concat_genome"
        / "concat_genome.fna",
        "concat_genome_done": Path(config["scratch directory"])
        / "concat_genome"
        / "indexed.done",
    },
    "mapped_reads": Path(config["scratch directory"]) / "mapped_reads",
    "feature_count": Path(config["scratch directory"]) / "HTseq",
    "genome_index_parent": Path(config["scratch directory"]) / "genome_index",
    "library_count": Path(config["scratch directory"])
    / "raw_library_counts"
    / "library_len.tsv",
    "coverage_positions": Path(config["scratch directory"]) / "coverage_positions",
    "fastqc": Path(config["scratch directory"]) / "fastqc",
}

results_path_dict = {
    "counts": Path(config["results directory"]) / "counts.tsv",
    "counts_json": Path(config["results directory"]) / "counts.json",
    "annotation_json": Path(config["results directory"]) / "annotations.json",
    "metadata": Path(config["results directory"]) / "metadata.tsv",
    "config": Path(config["results directory"]) / "config.yaml",
    "samples": Path(config["results directory"]) / "samples.tsv",
    "ref_json": Path(config["results directory"]) / "bio_db_ref_dict.json",
    "json": Path(config["results directory"]) / f"{config['experiment_name']}.json",
    "comparisons": Path(config["results directory"]) / "comparisons.json",
    "samples_json": Path(config["results directory"]) / "samples.json",
    "metadata_json": Path(config["results directory"]) / "metadata.json",
    "config_json": Path(config["results directory"]) / "config.json",
}

def mk_out(d, f=None):
    if f:
        d.mkdir(parents=True, exist_ok=True)
        p = d / f"{f}.out"
        p.unlink(missing_ok=True)
        return str(p)
    else:
        d.unlink(missing_ok=True)
        return str(d)

def mk_err(d, f=None):
    if f:
        d.mkdir(parents=True, exist_ok=True)
        p = d / f"{f}.err"
        p.unlink(missing_ok=True)
        return str(p)
    else:
        d.unlink(missing_ok=True)
        return str(d)

rule all:
    input:
        expand(output_path_dict["feature_count"] / "{sample}.tsv", sample=SAMPLES),
        # list(results_path_dict.values()),

include: "rules/counting_features.smk"
include: "rules/genome_concat.smk"
include: "rules/gff_tools.smk"

if config["aligner"] == "bwa":

    include: "rules/map_reads_bwa.smk"


if config["aligner"] == "bowtie2":

    include: "rules/map_reads_bowtie2.smk"


include: "rules/post_count_analysis.smk"


include: "rules/run_trim.smk"


include: "rules/samtools.smk"


include: "rules/unzip.smk"


include: "rules/fastqc.smk"
